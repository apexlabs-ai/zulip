components:
  parameters:
    Event_types:
      description: "A JSON-encoded array indicating which types of events you're interested\n\
        in. Values that you might find useful include:\n\n  * **message** (messages)\n\
        \  * **subscription** (changes in your subscriptions)\n  * **realm_user**\
        \ (changes to users in the organization and\n    their properties, such as\
        \ their name).\n\nIf you do not specify this argument, you will receive all\n\
        events, and have to filter out the events not relevant to\nyour client in\
        \ your client code.  For most applications, one\nis only interested in messages,\
        \ so one specifies:\n`event_types=['message']`\n"
      in: query
      name: event_types
      required: false
      schema:
        items:
          type: string
        type: array
  responses:
    SimpleSuccess:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JsonSuccess'
      description: Success.
  schemas:
    AddSubscriptionsResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          already_subscribed:
            description: 'A dictionary where the key is the email address of the user/bot
              and the

              value is a list of the names of the streams that the user/bot is already

              subscribed to.

              '
            type: object
          subscribed:
            description: 'A dictionary where the key is the email address of the user/bot
              and the

              value is a list of the names of the streams that were subscribed to
              as a

              result of the query.

              '
            type: object
          unauthorized:
            description: 'A list of names of streams that the requesting user/bot
              was not

              authorized to subscribe to.

              '
            items:
              type: string
            type: array
    ApiKeyResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          api_key:
            description: 'The API key that can be used to authenticate as the requested
              user.

              '
            type: string
          email:
            description: 'The email address of the user who owns the API key.

              '
            type: string
      - example:
          api_key: gjA04ZYcqXKalvYMA8OeXSfzUOLrtbZv
          email: iago@zulip.com
          msg: ''
          result: success
    BadEventQueueIdError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - properties:
          queue_id:
            description: 'The string that identifies the invalid event queue.

              '
            type: string
      - example:
          code: BAD_EVENT_QUEUE_ID
          msg: 'Bad event queue id: 1518820930:1'
          queue_id: '1518820930:1'
          result: error
    CodedError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - properties:
          code:
            description: 'A string that identifies the error.

              '
            type: string
    InvalidApiKeyError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          msg: Invalid API key
          result: error
    InvalidMessageError:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          raw_content:
            description: 'The raw content of the message.

              '
            type: string
      - example:
          code: BAD_REQUEST
          msg: Invalid message(s)
          result: error
    JsonError:
      allOf:
      - $ref: '#/components/schemas/JsonResponse'
      - required:
        - result
        - msg
      - properties:
          msg:
            type: string
          result:
            enum:
            - error
    JsonResponse:
      properties:
        result:
          type: string
      type: object
    JsonSuccess:
      allOf:
      - $ref: '#/components/schemas/JsonResponse'
      - required:
        - result
        - msg
      - properties:
          msg:
            type: string
          result:
            enum:
            - success
      - example:
          msg: ''
          result: success
    Message:
      properties:
        content:
          type: string
        content-type:
          type: string
        id:
          type: int
        is_me_message:
          type: boolean
        sender_email:
          type: string
        sender_full_name:
          type: string
        sender_id:
          type: int
        sender_short_name:
          type: string
        timestamp:
          type: int
        type:
          type: string
      type: object
    MissingArgumentError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - properties:
          var_name:
            description: 'It contains the information about the missing argument.

              '
            type: string
      - example:
          code: REQUEST_VARIABLE_MISSING
          msg: Missing 'content' argument
          result: error
          var_name: content
    NonExistingStreamError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - properties:
          stream:
            description: 'The name of the stream that could not be found.

              '
            type: string
      - example:
          code: STREAM_DOES_NOT_EXIST
          msg: Stream 'nonexistent_stream' does not exist
          result: error
          stream: nonexistent_stream
    Stream:
      properties:
        description:
          type: string
        invite_only:
          type: boolean
        name:
          type: string
        stream_id:
          type: int
      type: object
    UserNotAuthorizedError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: User not authorized for this query
          result: error
    getStreamIdGetError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: Invalid stream name 'nonexistent'
          result: error
    getStreamIdGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          stream_id:
            description: 'The ID of the given stream.

              '
            type: integer
      - example:
          msg: ''
          result: success
          stream_id: 15
    messagesFlagsPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          messages:
            description: 'An array with the IDs of the modified messages.

              '
            items:
              type: integer
            type: array
      - example:
          messages:
          - 4
          - 18
          - 15
          msg: ''
          result: success
    messagesGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          anchor:
            description: 'The same `anchor` specified in the request (or the computed
              one, if

              `use_first_unread_anchor` is `true`).

              '
            type: integer
          found_anchor:
            description: 'Whether the anchor message is included in the

              response. If the message with the ID specified

              in the request does not exist or did not match

              the narrow, this will be false.

              '
            type: boolean
          found_newest:
            description: 'Whether the `messages` list includes the very newest messages
              matching

              the narrow (used by clients that paginate their requests to decide

              whether there are more messages to fetch).

              '
            type: boolean
          found_oldest:
            description: 'Whether the `messages` list includes the very oldest messages
              matching

              the narrow (used by clients that paginate their requests to decide

              whether there are more messages to fetch).

              '
            type: boolean
          history_limited:
            description: 'Whether the message history was limited due to

              plan restrictions. This flag is set to `true`

              only when the oldest messages(`found_oldest`)

              matching the narrow is fetched.

              '
            type: boolean
          messages:
            items:
              $ref: '#/components/Message'
            type: array
      - example:
          anchor: 21
          found_anchor: true
          found_newest: true
          messages:
          - avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            client: populate_db
            content: <p>Security experts agree that relational algorithms are an interesting
              new topic in the field of networking, and scholars concur.</p>
            content_type: text/html
            display_recipient:
            - email: hamlet@zulip.com
              full_name: King Hamlet
              id: 4
              is_mirror_dummy: false
              short_name: hamlet
            - email: iago@zulip.com
              full_name: Iago
              id: 5
              is_mirror_dummy: false
              short_name: iago
            - email: prospero@zulip.com
              full_name: Prospero from The Tempest
              id: 8
              is_mirror_dummy: false
              short_name: prospero
            flags:
            - read
            id: 16
            is_me_message: false
            reactions: []
            recipient_id: 27
            sender_email: hamlet@zulip.com
            sender_full_name: King Hamlet
            sender_id: 4
            sender_realm_str: zulip
            sender_short_name: hamlet
            subject: ''
            submessages: []
            timestamp: 1527921326
            topic_links: []
            type: private
          - avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            client: populate_db
            content: <p>Wait, is this from the frontend js code or backend python
              code</p>
            content_type: text/html
            display_recipient: Verona
            flags:
            - read
            id: 21
            is_me_message: false
            reactions: []
            recipient_id: 20
            sender_email: hamlet@zulip.com
            sender_full_name: King Hamlet
            sender_id: 4
            sender_realm_str: zulip
            sender_short_name: hamlet
            stream_id: 5
            subject: Verona3
            submessages: []
            timestamp: 1527939746
            topic_links: []
            type: stream
          msg: ''
          result: success
    messagesMessageIdGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          raw_content:
            description: 'The raw content of the message.

              '
            type: string
      - example:
          msg: ''
          raw_content: '**Don''t** forget your towel!'
          result: success
    messagesMessageIdPatchError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - properties:
          msg:
            enum:
            - Your organization has turned off message editing
            - You don't have permission to edit this message
            - The time limit for editing this message has past
            - Nothing to change
            - Topic can't be empty
      - example:
          code: BAD_REQUEST
          msg: You don't have permission to edit this message
          result: error
    messagesMessageIdReactionsDeleteError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: Invalid message(s)
          result: error
    messagesMessageIdReactionsPostError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: Invalid emoji code
          result: error
    messagesPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          id:
            description: 'The ID assigned to the message sent.

              '
            type: integer
      - example:
          id: 42
          msg: ''
          result: success
    messagesRenderPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          rendered:
            description: 'The rendered HTML.

              '
            type: string
      - example:
          msg: ''
          rendered: <p><strong>foo</strong></p>
          result: success
    realmEmojiEmojiNamePostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
    realmEmojiGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          emoji:
            description: 'An object that contains `emoji` objects, each identified
              with their

              emoji ID as the key.

              '
            type: object
      - example:
          emoji:
            '1':
              author:
                email: iago@zulip.com
                full_name: Iago
                id: 5
              deactivated: false
              id: '1'
              name: green_tick
              source_url: /user_avatars/1/emoji/images/1.png
          msg: ''
          result: success
    registerPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          last_event_id:
            description: 'The initial value of `last_event_id` to pass to `GET /api/v1/events`.

              '
            type: integer
          queue_id:
            description: 'The ID of the queue that has been allocated for your client.

              '
            type: string
      - example:
          last_event_id: -1
          msg: ''
          queue_id: '1517975029:0'
          realm_emoji:
            '1':
              author:
                email: iago@zulip.com
                full_name: Iago
                id: 5
              deactivated: false
              id: '1'
              name: green_tick
              source_url: /user_avatars/1/emoji/images/1.png
          result: success
    settingsNotificationsPatchResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          enable_desktop_notifications:
            description: 'The setting for `enable_desktop_notifications`, if it was
              changed in

              this request.

              '
            type: boolean
          enable_digest_emails:
            description: 'The setting for `enable_digest_emails`, if it was changed
              in this

              request.

              '
            type: boolean
          enable_offline_email_notifications:
            description: 'The setting for `enable_offline_email_notifications`, if
              it was changed

              in this request.

              '
            type: boolean
          enable_offline_push_notifications:
            description: 'The setting for `enable_offline_push_notifications`, if
              it was changed

              in this request.

              '
            type: boolean
          enable_online_push_notifications:
            description: 'The setting for `enable_online_push_notifications`, if it
              was changed in

              this request.

              '
            type: boolean
          enable_sounds:
            description: 'The setting for `enable_sounds`, if it was changed in this
              request.

              '
            type: boolean
          enable_stream_audible_notifications:
            description: 'The setting for `enable_stream_audible_notifications`, if
              it was changed

              in this request.

              '
            type: boolean
          enable_stream_email_notifications:
            description: 'The setting for `enable_stream_email_notifications`, if
              it was changed

              in this request.

              '
            type: boolean
          enable_stream_push_notifications:
            description: 'The setting for `enable_stream_push_notifications`, if it
              was changed in

              this request.

              '
            type: boolean
          message_content_in_email_notifications:
            description: 'The setting for `message_content_in_email_notifications`,
              if it was

              changed in this request.

              '
            type: boolean
      - example:
          enable_offline_push_notifications: true
          enable_online_push_notifications: true
          msg: ''
          result: success
    streamsGetError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: User not authorized for this query
          result: error
    streamsGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          streams:
            description: 'A list of `stream` objects, which contain a `description`,
              a `name`,

              their `stream_id` and whether they are `invite_only` or not.

              '
            items:
              $ref: '#/components/schemas/Stream'
            type: array
      - example:
          msg: ''
          result: success
          streams:
          - description: A Scandinavian country
            invite_only: false
            name: Denmark
            stream_id: 1
          - description: Yet another Italian city
            invite_only: false
            name: Rome
            stream_id: 2
          - description: Located in the United Kingdom
            invite_only: false
            name: Scotland
            stream_id: 3
          - description: A northeastern Italian city
            invite_only: false
            name: Venice
            stream_id: 4
          - description: A city in Italy
            invite_only: false
            name: Verona
            stream_id: 5
          - description: New stream for testing
            invite_only: false
            name: new stream
            stream_id: 6
    streamsStreamIdDeleteError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - properties:
          msg:
            type: string
      - example:
          code: BAD_REQUEST
          msg: Invalid stream id
          result: error
    streamsStreamIdDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    streamsStreamIdPatchError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          code: BAD_REQUEST
          msg: Invalid stream id
          result: error
    streamsStreamIdPatchResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    userGroupsCreatePostError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          code: BAD_REQUEST
          msg: 'Invalid user ID: 500'
          result: error
    userGroupsCreatePostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    userGroupsGroupIdDeleteError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          code: BAD_REQUEST
          msg: Invalid user group
          result: error
    userGroupsGroupIdDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    userGroupsGroupIdPatchError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          code: BAD_REQUEST
          msg: Invalid user group
          result: error
    userUploadsPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          uri:
            description: 'The URI of the uploaded file.

              '
            type: string
      - example:
          msg: ''
          result: success
          uri: /user_uploads/1/4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
    userUploadsRealmIdStrFilenameGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          url:
            description: 'A temporary URL that can be used to access the uploaded
              file

              without Zulip''s normal API authentication.

              '
            type: string
      - example:
          msg: ''
          result: success
          url: /user_uploads/temporary/322F32632F39765378464E4C63306D3961396F4970705A4D74424565432F7A756C69702E7478743A316A5053616A3A3938625F44393446466D37357254315F4F414C425A4553464F6A55
    usersEmailPresenceGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          presence:
            description: 'An object containing the presence details for every client
              the user has

              logged into.

              '
            type: object
      - example:
          msg: ''
          presence:
            ZulipMobile:
              status: active
              timestamp: 1522687421
            aggregated:
              status: active
              timestamp: 1532697622
            website:
              status: active
              timestamp: 1532697622
          result: success
    usersMeDeleteError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          msg: Cannot deactivate the only organization administrator
          result: error
    usersMeDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    usersMeGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          avatar_url:
            description: 'URL for the user''s avatar.


              **Changes**: New in Zulip 2.1.0.

              '
            example: x
            type: string
          client_id:
            description: 'NA

              '
            example: 74c768b081076fdb3c4326256c17467e
            type: string
          email:
            description: 'Email of the requesting user.

              '
            example: iago@zulip.com
            type: string
          full_name:
            description: 'Full name of the requesting user.

              '
            example: Iago
            type: string
          is_admin:
            description: 'A boolean indicating if the requesting user is an admin.

              '
            example: true
            type: boolean
          is_bot:
            description: 'A boolean indicating if the requesting user is a bot.

              '
            example: false
            type: boolean
          max_message_id:
            description: 'NA.

              '
            example: 30
            type: integer
          pointer:
            description: 'NA

              '
            example: -1
            type: integer
          profile_data:
            description: 'A dictionary containing custom profile field data for the
              user. Each entry

              maps the integer ID of a custom profile field in the organization to
              a

              dictionary containing the user''s data for that field.  Generally the
              data

              includes just a single `value` key; for those custom profile fields

              supporting markdown, a `rendered_value` key will also be present.

              '
            type: object
          short_name:
            description: 'Short name of the requesting user.

              '
            example: iago
            type: string
          user_id:
            description: 'The user''s ID.

              '
            example: 1
            type: integer
      - example:
          avatar_url: https://secure.gravatar.com/avatar/af4f06322c177ef4e1e9b2c424986b54?d=identicon&version=1
          client_id: 74c768b081076fdb3c4326256c17467e
          email: iago@zulip.com
          full_name: Iago
          is_admin: true
          is_bot: false
          max_message_id: 30
          msg: ''
          pointer: -1
          profile_data:
            '1':
              rendered_value: <p>+1-234-567-8901</p>
              value: +1-234-567-8901
            '2':
              rendered_value: <p>Betrayer of Othello.</p>
              value: Betrayer of Othello.
            '3':
              rendered_value: <p>Apples</p>
              value: Apples
            '4':
              value: emacs
            '5':
              value: 2000-1-1
            '6':
              value: https://zulip.readthedocs.io/en/latest/
            '7':
              value: '[10]'
            '8':
              value: zulip
          result: success
          short_name: iago
          user_id: 5
    usersMeSubscriptionsDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          not_removed:
            description: 'A list of the names of streams that the user is already
              unsubscribed

              from, and hence doesn''t need to be unsubscribed.

              '
            items:
              type: string
            type: array
          removed:
            description: 'A list of the names of streams which were unsubscribed from
              as a result

              of the query.

              '
            items:
              type: string
            type: array
      - example:
          msg: ''
          not_removed: []
          removed:
          - new stream
          result: success
    usersMeSubscriptionsGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - required:
        - subscriptions
      - properties:
          subscriptions:
            items:
              type: object
            type: array
      - example:
          msg: ''
          result: success
          subscriptions:
          - audible_notifications: true
            color: '#e79ab5'
            description: A Scandinavian country
            desktop_notifications: true
            email_address: Denmark+187b4125ed36d6af8b5d03ef4f65c0cf@zulipdev.com:9981
            invite_only: false
            is_muted: false
            name: Denmark
            pin_to_top: false
            push_notifications: false
            stream_id: 1
            subscribers:
            - ZOE@zulip.com
            - hamlet@zulip.com
            - iago@zulip.com
            - othello@zulip.com
            - prospero@zulip.com
          - audible_notifications: true
            color: '#e79ab5'
            description: Located in the United Kingdom
            desktop_notifications: true
            email_address: Scotland+f5786390183e60a1ccb18374f9d05649@zulipdev.com:9981
            invite_only: false
            is_muted: false
            name: Scotland
            pin_to_top: false
            push_notifications: false
            stream_id: 3
            subscribers:
            - ZOE@zulip.com
            - iago@zulip.com
            - othello@zulip.com
            - prospero@zulip.com
    usersMeSubscriptionsPatchResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - required:
        - subscribed
        - not_subscribed
        - already_subscribed
        - removed
      - properties:
          already_subscribed:
            description: 'A dictionary where the key is the email

              address of the user/bot and the value is a

              list of the names of the streams that the

              user/bot is already subscribed to.

              '
            type: object
          not_removed:
            description: 'A list of the names of streams that the user

              is already unsubscribed from, and hence

              doesn''t need to be unsubscribed.

              '
            items:
              type: string
            type: array
          removed:
            description: 'A list of the names of streams which were unsubscribed

              from as a result of the query.

              '
            items:
              type: string
            type: array
          subscribed:
            description: 'A dictionary where the key is the email

              address of the user/bot and the value is a

              list of the names of the streams that were

              subscribed to as a result of the query.

              '
            type: object
      - example:
          already_subscribed:
            iago@zulip.com:
            - Verona
          msg: ''
          not_removed: []
          removed:
          - new stream
          result: success
          subscribed: {}
    usersUserIdDeleteError:
      allOf:
      - $ref: '#/components/schemas/JsonError'
      - example:
          msg: Cannot deactivate the only organization administrator
          result: error
    usersUserIdDeleteResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - example:
          msg: ''
          result: success
    usersUserIdGetResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          user:
            description: 'A dictionary containing the requested user''s details.

              '
            type: object
      - example:
          msg: ''
          result: success
          user:
            avatar_url: https://secure.gravatar.com/avatar/6d8cad0fd00256e7b40691d27ddfd466?d=identicon&version=1
            bot_type: null
            date_joined: '2019-10-20T07:50:53.729659+00:00'
            email: hamlet@zulip.com
            full_name: King Hamlet
            is_active: true
            is_admin: false
            is_bot: false
            is_guest: false
            profile_data:
              '1':
                rendered_value: <p>+0-11-23-456-7890</p>
                value: +0-11-23-456-7890
              '2':
                rendered_value: '<p>I am:</p>

                  <ul>

                  <li>The prince of Denmark</li>

                  <li>Nephew to the usurping Claudius</li>

                  </ul>'
                value: 'I am:

                  * The prince of Denmark

                  * Nephew to the usurping Claudius'
              '3':
                rendered_value: <p>Dark chocolate</p>
                value: Dark chocolate
              '4':
                value: vim
              '5':
                value: 1900-1-1
              '6':
                value: https://blog.zulig.org
              '7':
                value: '[11]'
              '8':
                value: zulipbot
            timezone: ''
            user_id: 10
    usersUserIdPatchError:
      allOf:
      - $ref: '#/components/schemas/CodedError'
      - example:
          code: BAD_REQUEST
          msg: Guests cannot be organization administrators
          result: error
    zuliutgoinebhookPostResponse:
      allOf:
      - $ref: '#/components/schemas/JsonSuccess'
      - properties:
          bot_email:
            description: 'Email of the bot user

              '
            type: string
          data:
            description: 'It contains the content of the message (in Markdown).

              '
            type: string
          message:
            description: 'A dict containing details on the message which triggered
              the outgoing

              webhook

              '
            type: object
          token:
            description: 'A string of alphanumeric characters that can be use to authenticate
              the

              webhook request (each bot user uses a fixed token).

              '
            type: string
          trigger:
            description: 'It contains the trigger method.

              '
            type: string
      - example:
          bot_email: outgoing-bot@localhost
          data: "@**Outgoing Webhook Test** Zulip is the world\u2019s most productive\
            \ group chat!"
          message:
            avatar_url: https://secure.gravatar.com/avatar/1f4f1575bf002ae562fea8fc4b861b09?d=identicon&version=1
            client: website
            content: "@**Outgoing Webhook Test** Zulip is the world\u2019s most productive\
              \ group chat!"
            display_recipient: Verona
            id: 112
            is_me_message: false
            reactions: []
            recipient_id: 20
            rendered_content: "<p><span class=\"user-mention\" data-user-id=\"25\"\
              >@Outgoing Webhook Test</span> Zulip is the world\u2019s most productive\
              \ group chat!</p>"
            sender_email: iago@zulip.com
            sender_full_name: Iago
            sender_id: 5
            sender_realm_str: zulip
            sender_short_name: iago
            stream_id: 5
            subject: Verona2
            submessages: []
            timestamp: 1527876931
            topic_links: []
            type: stream
          token: xvOzfurIutdRRVLzpXrIIHXJvNfaJLJ0
          trigger: mention
  securitySchemes:
    BasicAuth:
      description: 'Basic authentication, with the user''s email as the username,
        and the API

        key as the password. The API key can be fetched using the

        `/fetch_api_key` or `/dev_fetch_api_key` endpoints.

        '
      scheme: basic
      type: http
info:
  contact:
    url: https://zulipchat.com
  description: 'Powerful open source group chat

    '
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  title: Zulip REST API
  version: 1.0.0
openapi: 3.0.1
paths:
  /dev_fetch_api_key:
    post:
      description: 'Gather a token bound to a user account, to identify and authenticate

        them when making operations with the API. This token must be used as the

        password in the rest of the endpoints that require Basic authentication.

        '
      parameters:
      - description: 'The email address for the user that owns the API key.

          '
        example: iago@zulip.com
        in: query
        name: username
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: Success.
      security: []
  /fetch_api_key:
    post:
      description: 'Given a username and password, fetch the user''s API key.


        Used to authenticate the mobile and terminal apps when the server

        has EmailAuthBackend or LDAPAuthBackend enabled.

        '
      operationId: zerver.views.auth.api_fetch_api_key
      parameters:
      - description: 'The username to be used for authentication (typically, the email

          address, but it could be an LDAP username).

          '
        in: query
        name: username
        required: true
        schema:
          type: string
      - description: 'The user''s Zulip password (or LDAP password, if LDAP authentication
          is in use).

          '
        in: query
        name: password
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: Success.
  /get_stream_id:
    get:
      description: 'Get the unique ID of a given stream.

        '
      parameters:
      - description: 'The name of the stream to retrieve the ID for.

          '
        example: Denmark
        in: query
        name: stream
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStreamIdGetResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/getStreamIdGetError'
          description: Bad request.
  /jwt_fetch_api_key:
    post:
      description: ''
      operationId: zerver.views.auth.api_jwt_fetch_api_key
      parameters:
      - description: 'The username to be used for authentication (typically, the email

          address, but it could be an LDAP username).

          '
        in: query
        name: json_web_token
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiKeyResponse'
          description: Success.
  /mark_all_as_read:
    post:
      description: 'Mark all the user''s unread messages as read. This is often called

        "bankruptcy" in Zulip.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
  /mark_stream_as_read:
    post:
      description: 'Mark all the unread messages in a stream as read.

        '
      parameters:
      - description: 'The ID of the stream whose messages should be marked as read.

          '
        example: 42
        in: query
        name: stream_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
  /mark_topic_as_read:
    post:
      description: 'Mark all the unread messages in a topic as read.

        '
      parameters:
      - description: 'The ID of the stream that contains the topic.

          '
        example: 42
        in: query
        name: stream_id
        required: true
        schema:
          type: integer
      - description: 'The name of the topic whose messages should be marked as read.

          '
        example: new coffee machine
        in: query
        name: topic_name
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
  /messages:
    get:
      description: 'Fetch messages that match a specific narrow.

        '
      parameters:
      - description: "Integer message ID to anchor fetching of new messages. Supports\
          \ special\nstring values for when the client wants the server to compute\
          \ the anchor\nto use:\n\n* `newest`: The most recent message.\n* `oldest`:\
          \ The oldest message.\n* `first_unread`: The oldest unread message matching\
          \ the\n  query, if any; otherwise, the most recent message.\n\nThe special\
          \ values of `'newest'` and `'oldest'` are also supported\nfor anchoring\
          \ the query at the most recent or oldest messages.\n\n**Changes**: String\
          \ values are new in Zulip 2.2.  The\n  `first_unread` functionality was\
          \ supported in Zulip 2.1.x\n  and older by not sending anchor and using\
          \ use_first_unread_anchor.\n\n  In Zulip 2.1.x and older, `oldest` can be\
          \ emulated with\n  `anchor=0`, and `newest` with `anchor=10000000000000000`\n\
          \  (that specific large value works around a bug in Zulip\n  2.1.x and older\
          \ in the `found_newest` return value).\n"
        example: 42
        in: query
        name: anchor
        schema:
          oneOf:
          - type: string
          - type: integer
      - description: 'The number of messages with IDs less than the anchor to retrieve.

          '
        example: 4
        in: query
        name: num_before
        required: true
        schema:
          type: integer
      - description: 'The number of messages with IDs greater than the anchor to retrieve.

          '
        example: 8
        in: query
        name: num_after
        required: true
        schema:
          type: integer
      - description: 'The narrow where you want to fetch the messages from. See how
          to

          [construct a narrow](/api/construct-narrow).

          '
        example:
        - operand: Denmark
          operator: stream
        in: query
        name: narrow
        schema:
          type: string
      - description: 'Whether the client supports computing gravatars URLs.  If

          enabled, `avatar_url` will be included in the response only

          if there is a Zulip avatar, and will be `null` for users who

          are using gravatar as their avatar.  This option

          significantly reduces the compressed size of user data,

          since gravatar URLs are long, random strings and thus do not

          compress well.

          '
        example: true
        in: query
        name: client_gravatar
        schema:
          default: false
          type: boolean
      - description: 'If `true`, message content is returned in the rendered HTML

          format. If `false`, message content is returned in the raw

          markdown-format text that user entered.

          '
        example: false
        in: query
        name: apply_markdown
        schema:
          default: true
          type: boolean
      - description: 'Legacy way to specify `anchor="first_unread"` in Zulip 2.1.x
          and older.


          Whether to use the (computed by the server) first unread message

          matching the narrow as the `anchor`.  Mutually exclusive with `anchor`.


          **Changes**: Deprecated in Zulip 2.2, replaced by

          `anchor="first_unread"` instead.

          '
        example: true
        in: query
        name: use_first_unread_anchor
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesGetResponse'
          description: Success.
    post:
      description: 'Send a message.

        '
      parameters:
      - description: 'The type of message to be sent. `private` for a private message
          and

          `stream` for a stream message.

          '
        example: private
        in: query
        name: type
        required: true
        schema:
          enum:
          - private
          - stream
          type: string
      - description: 'For stream messages, either the name or integer ID of the stream.
          For

          private messages, either a list containing integer user IDs or a list

          containing string email addresses.


          **Changes**: Support using user/stream IDs was added in Zulip 2.0.0.

          '
        example:
        - 9
        - 10
        in: query
        name: to
        required: true
        schema:
          type: string
      - description: 'The topic of the message. Only required if `type` is `stream`,
          ignored

          otherwise. Maximum length of 60 characters.

          '
        example: Castle
        in: query
        name: topic
        schema:
          default: null
          type: string
      - description: 'The content of the message. Maximum message size of 10000 bytes.

          '
        example: Hello
        in: query
        name: content
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesPostResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/NonExistingStreamError'
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - example:
                      code: BAD_REQUEST
                      msg: Invalid email 'eeshan@zulip.com'
                      result: error
          description: Bad request.
  /messages/flags:
    post:
      description: 'Add or remove flags in a list of messages.

        '
      parameters:
      - description: 'An array containing the IDs of the target messages.

          '
        example:
        - 4
        - 8
        - 15
        in: query
        name: messages
        required: true
        schema:
          items:
            type: integer
          type: array
      - description: 'Whether to `add` the flag or `remove` it.

          '
        example: add
        in: query
        name: op
        required: true
        schema:
          enum:
          - add
          - remove
          type: string
      - description: 'The flag that should be added/removed.

          '
        example: read
        in: query
        name: flag
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesFlagsPostResponse'
          description: Success.
  /messages/render:
    post:
      description: 'Render a message to HTML.

        '
      parameters:
      - description: 'The content of the message.

          '
        example: '**foo**'
        in: query
        name: content
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesRenderPostResponse'
          description: Success.
  /messages/{message_id}:
    delete:
      description: 'Delete a message.

        '
      parameters:
      - description: 'The ID of the message to delete.

          '
        example: 42
        in: path
        name: message_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                oneOf:
                - $ref: '#/components/schemas/InvalidMessageError'
                - allOf:
                  - $ref: '#/components/schemas/CodedError'
                  - example:
                      code: BAD_REQUEST
                      msg: You don't have permission to delete this message
                      result: error
          description: Bad request.
    get:
      description: 'Get the raw content of a message.

        '
      parameters:
      - description: 'The target message''s ID.

          '
        example: 42
        in: path
        name: message_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesMessageIdGetResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidMessageError'
          description: Bad request.
    patch:
      description: 'Edit a message that has already been sent.

        '
      parameters:
      - description: 'The ID of the message that you wish to edit/update.

          '
        example: 42
        in: path
        name: message_id
        required: true
        schema:
          type: integer
      - description: 'The topic of the message. Only required for stream messages.
          Maximum

          length of 60 characters.

          '
        example: Castle
        in: query
        name: topic
        schema:
          default: null
          type: string
      - description: '"Which message(s) should be edited: just the one indicated in

          `message_id`, messages in the same topic that had been sent after this

          one, or all of them."

          '
        example: change_all
        in: query
        name: propagate_mode
        schema:
          default: change_one
          enum:
          - change_one
          - change_later
          - change_all
          type: string
      - description: 'The content of the message. Maximum message size of 10000 bytes.

          '
        example: Hello
        in: query
        name: content
        schema:
          type: string
      - description: 'The stream ID to move the message(s) to, if moving to another
          stream.

          '
        example: 2
        in: query
        name: stream_id
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesMessageIdPatchError'
          description: Bad request.
  /messages/{message_id}/reactions:
    delete:
      description: 'Delete an emoji reaction from a message.

        '
      parameters:
      - description: 'The ID of the message from which you want to delete the emoji
          reaction.

          '
        example: 41
        in: path
        name: message_id
        required: true
        schema:
          type: integer
      - description: 'Name of the emoji you want to delete from a reaction.


          To find an emoji''s name, hover over a message to

          reveal three icons on the right, then click the smiley face icon.

          Images of available reaction emojis appear. Hover over the emoji

          you want, and note that emoji''s text name.


          Ignored if emoji_code is also passed.

          '
        example: octopus
        in: query
        name: emoji_name
        required: false
        schema:
          type: string
      - description: 'Alternative to emoji_name for expressing which emoji to remove.
          An

          encoded version of the unicode codepoint for the emoji you''d like to

          remove from the message.


          Recommended over using `emoji_name` for Zulip apps

          because this more robustly handles changes in the mapping

          between user-facing names and aliases for emoji (which change from

          time to time) and their unicode codepoints.

          '
        example: 1f419
        in: query
        name: emoji_code
        required: false
        schema:
          type: string
      - description: 'When removing a reaction with a [custom emoji](/help/add-custom-emoji),

          set `reaction_type` to `realm_emoji`.

          '
        example: unicode_emoji
        in: query
        name: reaction_type
        required: false
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/SimpleSuccess'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesMessageIdReactionsDeleteError'
          description: Bad request.
    post:
      description: 'Add an emoji reaction to a message.

        '
      parameters:
      - description: 'The ID of the message that you want to add an emoji reaction
          to.

          '
        example: 42
        in: path
        name: message_id
        required: true
        schema:
          type: integer
      - description: 'Name of the emoji you want to add as as a reaction.


          To find an emoji''s name, hover over a message to reveal

          three icons on the right, then click the smiley face icon.

          Images of available reaction emojis appear. Hover over the

          emoji you want, and note that emoji''s text name.

          '
        example: octopus
        in: query
        name: emoji_name
        required: true
        schema:
          type: string
      - description: 'An encoded version of the unicode codepoint.  For most

          clients, you won''t need this; it''s used to handle a rare

          corner case when upvoting a unicode emoji reaction added

          previously by another user.


          If the existing reaction was added when the Zulip

          server was using a previous version of the emoji

          data mapping from codepoints to human-readable

          names, sending the `emoji_code` in the data for

          the original reaction allows the Zulip server to

          correctly consider your upvote as an upvote

          rather than a reaction with a "diffenent" emoji.

          '
        example: 1f419
        in: query
        name: emoji_code
        required: false
        schema:
          type: string
      - description: 'If you are reacting with a [custom emoji](/help/add-custom-emoji),
          set

          `reaction_type` to `realm_emoji`.

          '
        example: unicode_emoji
        in: query
        name: reaction_type
        required: false
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/SimpleSuccess'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/messagesMessageIdReactionsPostError'
          description: Bad request.
  /real-time:
    post:
      description: '(Ignored)

        '
      parameters:
      - description: 'A JSON-encoded array of length 2 indicating the narrow for which
          you''d

          like to receive events for. For instance, to receive events for the

          stream `Denmark`, you would specify `narrow=[''stream'', ''Denmark'']`.

          Another example is `narrow=[''is'', ''private'']` for private messages.

          Default is `[]`.

          '
        example: narrow=['stream', 'Denmark']
        in: query
        name: narrow
        required: false
        schema:
          items:
            type: string
          type: array
      - $ref: '#/components/parameters/Event_types'
        example: event_types=['message']
      responses:
        '200':
          description: Success
      security:
      - basicAuth: []
  /realm/emoji:
    get:
      description: 'Get all the custom emoji in the user''s realm.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/realmEmojiGetResponse'
          description: Success.
  /realm/emoji/{emoji_name}:
    post:
      description: 'Upload a single emoji file.

        '
      parameters:
      - description: 'The name that should be associated with the uploaded emoji image/gif.

          '
        in: path
        name: emoji_name
        required: true
        schema:
          type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                filename:
                  example: /path/to/img.png
                  format: binary
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/realmEmojiEmojiNamePostResponse'
          description: Success.
  /realm/filters/{filter_id}:
    delete:
      description: 'Remove an organization filter.

        '
      parameters:
      - description: 'The ID of the filter that you want to remove.

          '
        example: 42
        in: path
        name: filter_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
  /register:
    post:
      description: 'This powerful endpoint can be used to register a Zulip "event
        queue"

        (subscribed to certain types of "events", or updates to the messages and

        other Zulip data the current user has access to), as well as to fetch

        the current state of that data.

        '
      parameters:
      - description: 'Set to `true` if you would like the content to be rendered in
          HTML

          format (otherwise the API will return the raw text that the user

          entered)

          '
        example: true
        in: query
        name: apply_markdown
        schema:
          default: false
          type: boolean
      - description: 'The `client_gravatar` field is set to `true` if clients can
          compute

          their own gravatars.

          '
        example: true
        in: query
        name: client_gravatar
        schema:
          default: false
          type: boolean
      - description: 'Setting this to `true` will make presence dictionaries be keyed
          by

          user_id instead of email.


          **Changes**: New in Zulip 2.2.

          '
        example: true
        in: query
        name: slim_presence
        schema:
          default: false
          type: boolean
      - $ref: '#/components/parameters/Event_types'
        example:
        - message
      - description: 'Set to `True` if you would like to receive events that occur
          within all

          public streams.

          '
        example: true
        in: query
        name: all_public_streams
        schema:
          default: false
          type: boolean
      - description: 'Set to `True` if you would like to receive events that include
          the

          subscribers for each stream.

          '
        example: true
        in: query
        name: include_subscribers
        schema:
          default: false
          type: boolean
      - description: "Dictionary containing details on features the client supports\
          \ that are\nrelevant to the format of responses sent by the server.\n\n\
          * `notification_settings_null`: Boolean for whether the\n  client can handle\
          \ the current API with null values for\n  stream-level notification settings\
          \ (which means the stream\n  is not customized and should inherit the user's\
          \ global\n  notification settings for stream messages).  New in Zulip\n\
          \  2.1.0; in earlier Zulip releases, stream-level\n  notification settings\
          \ were simple booleans.\n"
        example:
          notification_settings_null: true
        in: query
        name: client_capabilities
        schema:
          type: object
      - description: 'Same as the `event_types` argument except that the values in

          `fetch_event_types` are used to fetch initial data. If

          `fetch_event_types` is not provided, `event_types` is used and if

          `event_types` is not provided, this argument defaults to `None`.

          '
        example:
        - message
        in: query
        name: fetch_event_types
        schema:
          items:
            type: string
          type: array
      - description: 'A JSON-encoded array of length 2 indicating the narrow for which
          you''d

          like to receive events. For instance, to receive events for the stream

          `Denmark`, you would specify `narrow=[''stream'', ''Denmark'']`. Another

          example is `narrow=[''is'', ''private'']` for private messages.

          '
        example:
        - stream
        - Denmark
        in: query
        name: narrow
        schema:
          default: []
          items:
            anyOf:
            - type: string
            - type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/registerPostResponse'
          description: Success.
  /rest-error-handling:
    post:
      description: 'Common error to many endpoints

        '
      responses:
        '400':
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/InvalidApiKeyError'
                - allOf:
                  - $ref: '#/components/schemas/MissingArgumentError'
                - allOf:
                  - $ref: '#/components/schemas/UserNotAuthorizedError'
          description: 'Bad request.

            '
  /settings/notifications:
    patch:
      description: 'Modify the user''s preferences for notifications.

        '
      parameters:
      - description: 'Enable visual desktop notifications for stream messages.

          '
        example: true
        in: query
        name: enable_stream_desktop_notifications
        schema:
          type: boolean
      - description: 'Enable email notifications for stream messages.

          '
        example: true
        in: query
        name: enable_stream_email_notifications
        schema:
          type: boolean
      - description: 'Enable mobile notifications for stream messages.

          '
        example: true
        in: query
        name: enable_stream_push_notifications
        schema:
          type: boolean
      - description: 'Enable audible desktop notifications for stream messages.

          '
        example: true
        in: query
        name: enable_stream_audible_notifications
        schema:
          type: boolean
      - description: 'Notification sound name.

          '
        example: ding
        in: query
        name: notification_sound
        schema:
          format: json
          type: string
      - description: 'Enable visual desktop notifications for private messages and
          @-mentions.

          '
        example: true
        in: query
        name: enable_desktop_notifications
        schema:
          type: boolean
      - description: 'Enable audible desktop notifications for private messages and

          @-mentions.

          '
        example: true
        in: query
        name: enable_sounds
        schema:
          type: boolean
      - description: 'Enable email notifications for private messages and @-mentions
          received

          when the user is offline.

          '
        example: true
        in: query
        name: enable_offline_email_notifications
        schema:
          type: boolean
      - description: 'Enable mobile notification for private messages and @-mentions
          received

          when the user is offline.

          '
        example: true
        in: query
        name: enable_offline_push_notifications
        schema:
          type: boolean
      - description: 'Enable mobile notification for private messages and @-mentions
          received

          when the user is online.

          '
        example: true
        in: query
        name: enable_online_push_notifications
        schema:
          type: boolean
      - description: 'Enable digest emails when the user is away.

          '
        example: true
        in: query
        name: enable_digest_emails
        schema:
          type: boolean
      - description: 'Enable email notifications for new logins to account.

          '
        example: true
        in: query
        name: enable_login_emails
        schema:
          type: boolean
      - description: 'Include the message''s content in missed messages email notifications.

          '
        example: true
        in: query
        name: message_content_in_email_notifications
        schema:
          type: boolean
      - description: 'Include content of private messages in desktop notifications.

          '
        example: true
        in: query
        name: pm_content_in_desktop_notifications
        schema:
          type: boolean
      - description: 'Whether wildcard mentions (E.g. @**all**) should send notifications

          like a personal mention.

          '
        example: true
        in: query
        name: wildcard_mentions_notify
        schema:
          type: boolean
      - description: "> Unread count summary (appears in desktop sidebar and browser\
          \ tab)\n\n * 1 - All unreads\n * 2 - Private messages and mentions\n * 3\
          \ - None\n"
        example: 1
        in: query
        name: desktop_icon_count_display
        schema:
          enum:
          - 1
          - 2
          - 3
          type: integer
      - description: 'Include organization name in subject of missed message emails.

          '
        example: true
        in: query
        name: realm_name_in_notifications
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/settingsNotificationsPatchResponse'
          description: Success.
  /streams:
    get:
      description: 'Get all streams that the user has access to.

        '
      parameters:
      - description: 'Include all public streams.

          '
        example: false
        in: query
        name: include_public
        schema:
          default: true
          type: boolean
      - description: 'Include all streams that the user is subscribed to.

          '
        example: false
        in: query
        name: include_subscribed
        schema:
          default: true
          type: boolean
      - description: 'Include all active streams. The user must have administrative
          privileges

          to use this parameter.

          '
        example: true
        in: query
        name: include_all_active
        schema:
          default: false
          type: boolean
      - description: 'Include all default streams for the user''s realm.

          '
        example: true
        in: query
        name: include_default
        schema:
          default: false
          type: boolean
      - description: 'If the user is a bot, include all streams that the bot''s owner
          is

          subscribed to.

          '
        example: true
        in: query
        name: include_owner_subscribed
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsGetResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsGetError'
          description: Bad request.
  /streams/{stream_id}:
    delete:
      description: 'Delete the stream with the given ID.

        '
      operationId: zerver.views.streams.deactivate_stream_backend
      parameters:
      - description: 'The ID of the stream to be deleted.

          '
        example: 42
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsStreamIdDeleteResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsStreamIdDeleteError'
          description: Bad request.
    patch:
      description: 'Update the stream with the given ID.

        '
      operationId: zerver.views.streams.update_stream_backend
      parameters:
      - description: 'The ID of the stream to be updated.

          '
        example: 42
        in: path
        name: stream_id
        required: true
        schema:
          type: integer
      - description: 'The new description for the stream.

          '
        example: This stream is related to football dicsussions.
        in: query
        name: description
        required: false
        schema:
          format: json
          type: string
      - description: 'The new name for the stream.

          '
        example: Italy
        in: query
        name: new_name
        required: false
        schema:
          format: json
          type: string
      - description: 'Change whether the stream is a private stream.

          '
        example: true
        in: query
        name: is_private
        required: false
        schema:
          type: boolean
      - description: 'Whether the stream is limited to announcements.


          **Changes**: Deprecated in Zulip 2.2, use `stream_post_policy` instead.

          '
        example: true
        in: query
        name: is_announcement_only
        required: false
        schema:
          type: boolean
      - description: 'Policy for which users can post messages to the stream.


          * 1 => Any user can post.

          * 2 => Only administrators can post.

          * 3 => Only new members can post.


          **Changes**: New in Zulip 2.2, replacing the previous `is_announcement_only`

          boolean.

          '
        example: 2
        in: query
        name: stream_post_policy
        required: false
        schema:
          type: integer
      - description: 'Whether subscribers have access to full stream history, even
          before they joined

          the stream.

          '
        example: true
        in: query
        name: history_public_to_subscribers
        required: false
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsStreamIdPatchResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/streamsStreamIdPatchError'
          description: Bad request.
  /typing:
    post:
      description: 'Send an event indicating that the user has started or stopped
        typing on

        their client.

        '
      parameters:
      - description: 'Whether the user has started (`start`) or stopped (`stop`) to
          type.

          '
        example: start
        in: query
        name: op
        required: true
        schema:
          enum:
          - start
          - stop
          type: string
      - description: 'The user_ids of the recipients of the message being typed. Typing

          notifications are only supported for private messages. Send a

          JSON-encoded list of user_ids. (Use a list even if there is only one

          recipient.).


          **Changes**: Before Zulip 2.0, this parameter accepted only a JSON-encoded

          list of email addresses.  The email address-based format is deprecated

          and will be removed in Zulip 2.2.

          '
        example:
        - 9
        - 10
        in: query
        name: to
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
  /user_groups/create:
    post:
      description: 'Create a user group.

        '
      parameters:
      - description: 'The name of the user group.

          '
        example: marketing
        in: query
        name: name
        required: true
        schema:
          type: string
      - description: 'The description of the user group.

          '
        example: The marketing team.
        in: query
        name: description
        required: true
        schema:
          type: string
      - description: 'An array containing the user IDs of the initial members for
          the

          new user group.

          '
        example:
        - 1
        - 2
        - 3
        - 4
        in: query
        name: members
        required: true
        schema:
          items:
            type: integer
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userGroupsCreatePostResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userGroupsCreatePostError'
          description: Bad request.
  /user_groups/{group_id}:
    delete:
      description: 'Delete the user group.

        '
      parameters:
      - description: 'The ID of the group.

          '
        example: 42
        in: path
        name: group_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userGroupsGroupIdDeleteResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userGroupsGroupIdDeleteError'
          description: Bad request.
    patch:
      description: 'Update the user group.

        '
      parameters:
      - description: 'The ID of the group.

          '
        example: 42
        in: path
        name: group_id
        required: true
        schema:
          type: integer
      - description: 'The new name of the group.

          '
        example: marketing team
        in: query
        name: name
        required: true
        schema:
          type: string
      - description: 'The new description of the group.

          '
        example: The marketing team.
        in: query
        name: description
        required: true
        schema:
          type: string
      responses:
        '200':
          $ref: '#/components/responses/SimpleSuccess'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userGroupsGroupIdPatchError'
          description: Bad request.
  /user_uploads:
    post:
      description: 'Upload a single file and get the corresponding URI.

        '
      requestBody:
        content:
          multipart/form-data:
            schema:
              properties:
                filename:
                  example: /path/to/file
                  format: binary
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userUploadsPostResponse'
          description: Success.
  /user_uploads/{realm_id_str}/{filename}:
    get:
      description: 'Get a temporary URL for access to the file that doesn''t require
        authentication.

        '
      parameters:
      - description: 'The realm id.

          '
        example: 1
        in: path
        name: realm_id_str
        required: true
        schema:
          type: integer
      - description: 'Path to the URL.

          '
        example: 4e/m2A3MSqFnWRLUf9SaPzQ0Up_/zulip.txt
        in: path
        name: filename
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/userUploadsRealmIdStrFilenameGetResponse'
          description: Success.
  /users/me:
    delete:
      description: 'Delete the requesting user from the realm.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeDeleteResponse'
          description: Bad Request
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeDeleteError'
          description: Bad Request
    get:
      description: 'Get the requesting user''s profile data from the backend.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeGetResponse'
          description: Success
  /users/me/subscriptions:
    delete:
      description: 'Unsubscribe yourself or other users from one or more streams.

        '
      parameters:
      - description: 'A list of stream names to unsubscribe from. This argument is
          called

          `streams` in our Python API.

          '
        example:
        - Verona
        - Denmark
        in: query
        name: subscriptions
        required: true
        schema:
          items:
            type: string
          type: array
      - description: 'A list of email addresses of the users that will be unsubscribed
          from

          the streams specified in the `subscriptions` argument. If not provided,

          then the requesting user/bot is unsubscribed.

          '
        example:
        - ZOE@zulip.com
        in: query
        name: principals
        schema:
          items:
            type: string
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeSubscriptionsDeleteResponse'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NonExistingStreamError'
          description: Bad request.
    get:
      description: 'Get information on every stream the user is subscribed to.

        '
      operationId: zerver.views.streams.list_subscriptions_backend
      parameters:
      - description: 'Set to `true` if you would like each stream''s info to include
          a list of

          current subscribers to that stream. (This may be significantly slower in

          organizations with thousands of users.)


          **Changes**: New in Zulip 2.1.0.

          '
        example: true
        in: query
        name: include_subscribers
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeSubscriptionsGetResponse'
          description: Success.
    patch:
      description: 'Update which streams you are are subscribed to.

        '
      operationId: zerver.views.streams.update_subscriptions_backend
      parameters:
      - description: 'A list of stream names to unsubscribe from.

          '
        example:
        - Verona
        - Denmark
        in: query
        name: delete
        required: false
        schema:
          items:
            type: string
          type: array
      - description: 'A list of objects describing which streams to subscribe to,
          optionally

          including per-user subscription parameters (e.g. color) and if the

          stream is to be created, its description.

          '
        example:
        - name: Verona
        - color: '#e79ab5'
          description: A Scandinavian country
          name: Denmark
        in: query
        name: add
        required: false
        schema:
          items:
            properties:
              color:
                type: string
              description:
                type: string
              name:
                type: string
            type: object
          type: array
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersMeSubscriptionsPatchResponse'
          description: Success.
    post:
      description: 'Subscribe one or more users to one or more streams.

        '
      parameters:
      - description: '"A list of dictionaries containing the the key `name` and value

          specifying the name of the stream to subscribe. If the stream does not

          exist a new stream is created. The description of the stream created can

          be specified by setting the dictionary key `description` with an

          appropriate value.



          **Note**: This argument is called `streams` and not `subscriptions`

          in our Python API."

          '
        example:
        - description: Italian City
          name: Verona
        in: query
        name: subscriptions
        required: true
        schema:
          items:
            type: object
          type: array
      - description: 'A boolean specifying whether the streams specified in `subscriptions`

          are invite-only or not.

          '
        example: true
        in: query
        name: invite_only
        schema:
          default: false
          type: boolean
      - description: 'A list of email addresses of the users that will be subscribed
          to the

          streams specified in the `subscriptions` argument. If not provided, then

          the requesting user/bot is subscribed.

          '
        example:
        - ZOE@zulip.com
        in: query
        name: principals
        schema:
          default: []
          items:
            type: string
          type: array
      - description: 'A boolean specifying whether authorization errors (such as when
          the

          requesting user is not authorized to access a private stream) should be

          considered fatal or not. When `True`, an authorization error is reported

          as such. When set to `False`, the returned JSON payload indicates that

          there was an authorization error, but the response is still considered a

          successful one.

          '
        example: false
        in: query
        name: authorization_errors_fatal
        schema:
          default: true
          type: boolean
      - description: 'A boolean indicating if the history should be available to newly

          subscribed members.

          '
        example: false
        in: query
        name: history_public_to_subscribers
        schema:
          default: None
          type: boolean
      - description: 'Policy for which users can post messages to the stream.


          * 1 => Any user can post.

          * 2 => Only administrators can post.

          * 3 => Only new members can post.


          **Changes**: New in Zulip 2.2, replacing the previous is_announcement_only

          boolean.

          '
        example: 1
        in: query
        name: stream_post_policy
        schema:
          default: 1
          type: integer
      - description: 'If `announce` is `True` and one of the streams specified in

          `subscriptions` has to be created (i.e. doesn''t exist to begin with), an

          announcement will be made notifying that a new stream was created.

          '
        example: true
        in: query
        name: announce
        schema:
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - example:
                      already_subscribed: {}
                      msg: ''
                      result: success
                      subscribed:
                        iago@zulip.com:
                        - new stream
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - example:
                      already_subscribed:
                        newbie@zulip.com:
                        - new stream
                      msg: ''
                      result: success
                      subscribed: {}
          description: Success.
        '400':
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - example:
                      msg: Unable to access stream (private_stream).
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/AddSubscriptionsResponse'
                  - example:
                      already_subscribed: {}
                      msg: ''
                      result: success
                      subscribed: {}
                      unauthorized:
                      - private_stream
          description: Success.
  /users/me/subscriptions/muted_topics:
    patch:
      description: 'Toggle muting for a specific topic the user is subscribed to.

        '
      parameters:
      - description: 'The name of the stream in which to mute the topic.

          '
        example: Verona
        in: query
        name: stream
        required: false
        schema:
          type: string
      - description: 'The id of the stream in which to mute the topic.

          '
        example: 3
        in: query
        name: stream_id
        required: false
        schema:
          type: integer
      - description: 'The topic to (un)mute. Note that the request will succeed regardless
          of

          whether any messages have been sent to the specified topic.

          '
        example: dinner
        in: query
        name: topic
        required: true
        schema:
          type: string
      - description: 'Whether to mute (`add`) or unmute (`remove`) the provided topic.

          '
        example: add
        in: query
        name: op
        required: true
        schema:
          enum:
          - add
          - remove
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JsonSuccess'
          description: Success.
        '400':
          content:
            application/json:
              schema:
                oneOf:
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - example:
                      msg: Topic already muted
                      result: error
                - allOf:
                  - $ref: '#/components/schemas/JsonError'
                  - example:
                      msg: Topic is not muted
                      result: error
          description: Bad request.
  /users/{email}/presence:
    get:
      description: 'Get the presence status for a specific user.

        '
      parameters:
      - description: 'The email address of the user whose presence you want to fetch.

          '
        example: iago@zulip.com
        in: path
        name: email
        required: true
        schema:
          type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersEmailPresenceGetResponse'
          description: Success.
  /users/{user_id}:
    delete:
      description: 'Delete the user with the passed ''user_id'' from the realm.

        '
      parameters:
      - description: 'The user id of the user.

          '
        example: 11
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersUserIdDeleteResponse'
          description: Success
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersUserIdDeleteError'
          description: Bad Request
    get:
      description: 'Retrieve a user in a realm.

        '
      parameters:
      - description: 'The user id of the user.

          '
        example: 11
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      - description: 'The client should pass true if it can compute its own gravatar
          hashes.

          '
        example: true
        in: query
        name: client_gravatar
        schema:
          default: false
          type: boolean
      - description: 'The client should pass true if it wants to include custom profile
          field data.

          '
        example: true
        in: query
        name: include_custom_profile_fields
        schema:
          default: false
          type: boolean
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersUserIdGetResponse'
          description: Success.
    patch:
      description: 'Update the user.

        '
      parameters:
      - description: 'The user id of the user.

          '
        example: 12
        in: path
        name: user_id
        required: true
        schema:
          type: integer
      - description: 'The user''s full name.

          '
        example: NewName
        in: query
        name: full_name
        required: false
        schema:
          format: json
          type: string
      - description: 'Whether the target user is an administrator.

          '
        example: false
        in: query
        name: is_admin
        required: false
        schema:
          type: boolean
      - description: 'Whether the target user is a guest.

          '
        example: true
        in: query
        name: is_guest
        required: false
        schema:
          type: boolean
      - description: 'A dictionary containing the to be updated custom profile field
          data for the user.

          '
        example:
        - id: 4
          value: vim
        - id: 5
          value: '1909-04-05'
        in: query
        name: profile_data
        required: false
        schema:
          items:
            type: object
          type: array
      responses:
        '200':
          $ref: '#/components/responses/SimpleSuccess'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/usersUserIdPatchError'
          description: Bad request.
  /zulip-outgoing-webhook:
    post:
      description: 'Outgoing Webhooks allows to build or set up Zulip integrations
        which are

        notified when certain types of messages are sent in Zulip.

        '
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/zuliutgoinebhookPostResponse'
          description: 'Success

            '
security:
- basicAuth: []
servers:
- url: https://your.zulip.server/api/v1
